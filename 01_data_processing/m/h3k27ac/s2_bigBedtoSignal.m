load ../../mart_export_GRCh37_p13_coding_genes

filelistbed;

n=10000;

for idx=1:length(T.Genename)
idx

if exist(sprintf('res_bed/%s.mat',T.Genename{idx}),'file'), continue; end

gchrid=T.Chromosomescaffoldname(idx);
gstrand=T.Strand(idx);

if gstrand==1
genestart=double(T.GeneStartbp(idx));
else
genestart=double(T.GeneEndbp(idx));   
end

        D=zeros(length(bigbedfiles),2*n+1,1);
        offset=genestart-n-1;
        
    for j=1:length(bigbedfiles)
        
        fname=bigbedfiles{j};
        txt=sprintf('bigBedToBed download_files/%s tmp2/%d.bed -chrom=chr%d -start=%d -end=%d',...
            fname,j,gchrid,genestart-n,genestart+n);
        status=system(txt);
        
        if status==0
        
        [chr,pstart,pend,peakID,peakvalue] = bedimport(sprintf('tmp2/%d.bed',j));
        
		d=zeros(1,20001);
		
        for k = 1:length(chr)
            if pstart(k)-offset>=1, startD=pstart(k)-offset; end
            if pstart(k)-offset<1, startD=1; end
            endD = pend(k)-offset;
            d(startD:endD)=peakvalue(k);
        end
        
        d=d(1:20001);
        D(j,:)=d;
        
        end
		
		%if ~xls_strand(i), D=fliplr(D); end
		
    end
    
   save(sprintf('res_bed/%s',T.Genename{idx}),'D')
    
end




function [chr,pstart,pend,peakID,peakvalue] = bedimport(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [CHR,GSTART,GEND,PEAKID,PEAKVALUE] = IMPORTFILE(FILENAME) Reads data
%   from text file FILENAME for the default selection.
%
%   [CHR,GSTART,GEND,PEAKID,PEAKVALUE] = IMPORTFILE(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   [chr,gstart,gend,peakID,peakvalue] = importfile('a1bg.bed',1, 5);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/03 10:39:17

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format for each line of text:
%   column1: text (%s)
%	column2: double (%f)
%   column3: double (%f)
%	column4: text (%s)
%   column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%f%f%s%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
chr = cellstr(dataArray{:, 1});
pstart = dataArray{:, 2};
pend = dataArray{:, 3};
peakID = cellstr(dataArray{:, 4});
peakvalue = dataArray{:, 5};
end