function [donorid]=i_sampleid2donorid(sampleid)

    T=importfile('metadata.txt');
    if any(~ismember(sampleid,T.Sample)), error('xxx'); end
    [~,idx]=ismember(sampleid,T.Sample);
    donorid=T.Donor(idx);
    
end

%%

function metadata = importfile(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   METADATA = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   METADATA = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   metadata = importfile1('metadata.txt', 2, 182);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/24 11:51:45

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));


%% Split data into numeric and string columns.
rawNumericColumns = {};
rawStringColumns = string(raw(:, [1,2,3,4,5,6]));


%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [3,4,5]
    idx = (rawStringColumns(:, catIdx) == '<undefined>');
    rawStringColumns(idx, catIdx) = '';
end

%% Create output variable
metadata = table;
metadata.Donor = cellstr(rawStringColumns(:, 1));
metadata.Sample = cellstr(rawStringColumns(:, 2));
metadata.Species = categorical(rawStringColumns(:, 3));
metadata.Assay = categorical(rawStringColumns(:, 4));
metadata.Consortium = categorical(rawStringColumns(:, 5));
metadata.EpiRRRecord = cellstr(rawStringColumns(:, 6));

end
